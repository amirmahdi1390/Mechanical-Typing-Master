import keyTranslations from "./dataBase/keyTranslations.js"
let lettersDemonestrater = document.querySelector(".letter-parent");
let mistakesElement = document.querySelector(".mistakes");
let timerElement = document.querySelector(".timer");
let keyBoard = document.querySelector(".keyboard-img");
console.log(timerElement);
let wpmShower = document.querySelector(".wpm-result");
let accuracyShower = document.querySelector(".accuracy-result");
let timeSpentShower = document.querySelector(".time-spent");
let modalCloser = document.querySelectorAll(".modal-close");
let mistakesShower = document.querySelector(".mistakes-result");
let endElement = document.querySelectorAll(".modal-overlay");
let languageSelector = document.querySelector(".language-option");
let levelSelector = document.querySelector(".level-option");
let resetButton = document.querySelector(".restart-button");

let letters = {
	persian: {
		easy: {
			duration: 60,
			words: [
				"سلام",
				"خداحافظ",
				"کتاب",
				"مدرسه",
				"خانه",
				"ماشین",
				"کامپیوتر",
				"برنامه",
				"نویسی",
				"زندگی",
				"خانواده",
				"دوست",
				"عشق",
				"آرامش",
				"آسمان",
				"دریا",
				"کوه",
				"گل",
				"خورشید",
				"ماه",
				"ستاره",
				"باران",
				"برف",
				"باد",
				"هوا",
				"آب",
				"غذا",
				"نان",
				"میوه",
				"سبزی",
				"دانش",
				"آموز",
				"معلم",
				"دانشجو",
				"دانشگاه",
				"مدرسه",
				"کلاس",
				"درس",
				"تمرین",
				"امتحان",
				"کار",
				"شغل",
				"دفتر",
				"همکار",
				"مدیر",
				"شرکت",
				"تلفن",
				"موبایل",
				"اینترنت",
				"کامپیوتر",
				"تلویزیون",
				"رادیو",
				"موسیقی",
				"فیلم",
				"بازی",
				"ورزش",
				"فوتبال",
				"والیبال",
				"باشگاه",
				"سلامتی",
				"دکتر",
				"بیمارستان",
				"دارو",
				" درمان",
				"بیماری",
				"سفر",
				"مسافرت",
				"هتل",
				"فرودگاه",
				"قطار",
				"اتوبوس",
				"ماشین",
				"جاده",
				"خیابان",
				"شهر",
				"روستا",
				"طبیعت",
				"درخت",
				"گل",
				"حیوان",
				"سگ",
				"گربه",
				"پرنده",
				"ماهی",
				"رنگ",
				"آبی",
				"قرمز",
				"سبز",
				"زرد",
				"مشکی",
				"سفید",
				"صورتی",
				"نارنجی",
				"بنفش",
				"قهوه‌ای",
				"خاکستری",
				"طلایی",
				"نقره‌ای",
				"براق",
				"زیبا",
			],
		},
		medium: {
			duration: 45,
			words: [
				"من هر روز به مدرسه می روم.",
				"او کتاب جدیدی خرید.",
				"ما در پارک بازی کردیم.",
				"تو بسیار باهوش هستی.",
				"آنها به سفر رفتند.",
				"پرنده در آسمان پرواز می کند.",
				"من عاشق یادگیری هستم.",
				"این فیلم بسیار جذاب بود.",
				"آب برای زندگی ضروری است.",
				"پدربزرگ داستان جالبی تعریف کرد.",
				"ما در کلاس درس خواندیم.",
				"تو بهترین دوست من هستی.",
				"آنها در شهر جدیدی زندگی می کنند.",
				"من به موسیقی کلاسیک علاقه دارم.",
				"کودکان در حیاط بازی می کنند.",
				"او هر روز ورزش می کند.",
				"ما به دیدن خانواده رفتیم.",
				"این غذا بسیار خوشمزه است.",
				"تو باید بیشتر مطالعه کنی.",
				"آنها به کنسرت رفتند.",
				"من برنامه نویسی یاد می گیرم.",
				"پرندگان به جنوب مهاجرت می کنند.",
				"او همیشه به دیگران کمک می کند.",
				"ما در تابستان به سفر می رویم.",
				"این کتاب بسیار آموزنده است.",
				"تو می توانی هر کاری انجام دهی.",
				"آنها خانه جدیدی خریدند.",
				"من به طبیعت علاقه زیادی دارم.",
				"گلها در بهار شکوفا می شوند.",
				"او یک نقاش بسیار talented است.",
				"ما در رودخانه شنا کردیم.",
				"این فیلم بر اساس یک داستان واقعی ساخته شده.",
				"تو باید برای موفقیت تلاش کنی.",
				"آنها در مهمانی شرکت کردند.",
				"من به فوتبال علاقه دارم.",
				"پرنده آواز زیبایی می خواند.",
				"او در باغ گل کاشت.",
				"ما به موزه علوم رفتیم.",
				"این نرم افزار بسیار کاربردی است.",
				"تو می توانی زبان جدیدی یاد بگیری.",
				"آنها به کوهنوردی رفتند.",
				"من هر روز صبح زود بیدار می شوم.",
				"خورشید زمین را گرم می کند.",
				"او یک رمان جدید نوشت.",
				"ما در کلاس yoga شرکت کردیم.",
				"این دارو برای درمان بیماری است.",
				"تو باید بیشتر مراقب سلامت خود باشی.",
				"آنها به تماشای نمایش رفتند.",
				"من عکس های زیبایی گرفتم.",
				"ماهی ها در آب شنا می کنند.",
				"او یک کسب و کار جدید راه اندازی کرد.",
				"ما به خرید رفتیم.",
				"این مسابقه بسیار هیجان انگیز بود.",
				"تو باید برای آینده برنامه ریزی کنی.",
				"آنها به تماشای بازی فوتبال رفتند.",
				"من کتاب داستان می خوانم.",
				"باران باعث رشد گیاهان می شود.",
				"او در آشپزی بسیار مهارت دارد.",
				"ما به دیدن دوستان قدیمی رفتیم.",
				"این نرم افزار رایگان است.",
				"تو می توانی یک موسیقی بنوازی.",
				"آنها به پیاده روی در طبیعت رفتند.",
				"من به هنر علاقه زیادی دارم.",
				"ستاره ها در شب می درخشند.",
				"او یک ماشین جدید خرید.",
				"ما در رستوران غذا خوردیم.",
				"این دارو باید با تجویز پزشک مصرف شود.",
				"تو باید بیشتر به محیط زیست توجه کنی.",
				"آنها به تعطیلات رفتند.",
				"من به مطالعه تاریخ علاقه دارم.",
				"برف در زمستان می بارد.",
				"او یک باغ وحش visit کرد.",
				"ما به سینما رفتیم.",
				"این تلفن هوشمند ویژگی های زیادی دارد.",
				"تو می توانی یک زبان برنامه نویسی یاد بگیری.",
				"آنها به کنفرانس علمی رفتند.",
				"من عکس های مسافرت را نشان دادم.",
				"باد باعث خنکی هوا می شود.",
				"او یک recipe جدید آشپزی یاد گرفت.",
				"ما به ورزشگاه رفتیم.",
				"این دارو عوارض جانبی دارد.",
				"تو باید بیشتر کتاب بخوانی.",
				"آنها به جشن تولد رفتند.",
				"من به نجوم علاقه دارم.",
				"مه باعث کاهش visibility می شود.",
				"او یک کتابخانه تأسیس کرد.",
				"ما به پیک نیک رفتیم.",
				"این نرم افزار به روزرسانی شده است.",
				"تو می توانی یک instrument موسیقی یاد بگیری.",
				"آنها به دیدار اقوام رفتند.",
				"من به عکاسی علاقه دارم.",
				"رعد و برق در طوفان رخ می دهد.",
				"او یک کسب و کار آنلاین راه اندازی کرد.",
				"ما به concert رفتیم.",
				"این دارو باید در یخچال نگهداری شود.",
				"تو باید بیشتر ورزش کنی.",
				"آنها به مسابقه دوچرخه سواری رفتند.",
				"من به جغرافیا علاقه دارم.",
				"شبنم روی گل ها می نشیند.",
				"او یک فیلم مستند ساخت.",
				"ما به theatre رفتیم.",
				"این تلفن battery life طولانی دارد.",
			],
		},
		hard: {
			duration: 30,
			words: [
				"جمهوری اسلامی ایران در سال ۱۳۵۷ تأسیس شد و دارای 31 استان است.",
				"جمعیت ایران در آخرین سرشماری بیش از 85 میلیون نفر اعلام شده است.",
				"مساحت ایران approximately 1,648,195 کیلومتر مربع است که آن را هجدهمین کشور بزرگ جهان می‌کند.",
				"ایران دارای ذخایر نفت و گاز طبیعی است که among the largest in the world هستند.",
				"تعداد دانشجویان ایرانی در سال 1400 به بیش از 4 میلیون نفر رسید.",
				"صنعت خودروسازی ایران سالانه بیش از 1 میلیون دستگاه خودرو تولید می کند.",
				"صادرات غیرنفتی ایران در سال 1399 به بیش از 45 میلیارد دلار رسید.",
				"توربین‌های بادی جدید قادر به تولید 2.5 مگاوات برق هستند.",
				"فلات ایران approximately 2.7 میلیون کیلومتر مربع مساحت دارد.",
				"دریاچه ارومیه که بزرگترین دریاچه ایران است، مساحتی around 5,200 کیلومتر مربع دارد.",
				"کوه دماوند با ارتفاع 5,610 متر بلندترین قله ایران و خاورمیانه است.",
				"ایران دارای بیش از 1,648,195 کیلومتر مربع وسعت است.",
				"نرخ تورم ایران در سال 1400 به approximately 40% رسید.",
				"بودجه سالانه ایران در سال 1400 حدود 4,800 trillion تومان بود.",
				"ایران دارای بیش از 300 روز آفتابی در سال در بسیاری از مناطق است.",
				"صنعت گردشگری ایران سالانه بیش از 8 میلیون گردشگر جذب می کند.",
				"طول خطوط راه آهن ایران بیش از 14,000 کیلومتر است.",
				"ایران دارای بیش از 80 فرودگاه فعال است.",
				"تعداد مشترکان اینترنت در ایران به over 70 میلیون نفر رسیده است.",
				"صادرات پتروشیمی ایران سالانه بیش از 20 میلیارد دلار ارزش دارد.",
				"سد دز با ارتفاع 203 متر یکی از بلندترین سدهای ایران است.",
				"ایران دارای بیش از 1.2 میلیون کیلومتر جاده است.",
				"تولید برق ایران بیش از 85,000 مگاوات capacity دارد.",
				"صنعت فولاد ایران سالانه بیش از 30 میلیون تن فولاد تولید می کند.",
				"صادرات کشمش ایران approximately 150 هزار تن در سال است.",
				"ایران دارای بیش از 53,000 مدرسه و 5,000 کتابخانه عمومی است.",
				"تعداد بیمارستان‌های ایران به over 1,000 مرکز رسیده است.",
				"صادرات فرش دستباف ایران سالانه حدود 400 میلیون دلار است.",
				"ایران دارای بیش از 7,000 گونه گیاهی مختلف است.",
				"تعداد خودروهای سواری در ایران به over 20 میلیون دستگاه رسیده است.",
				"صادرات پسته ایران approximately 200 هزار تن در سال است.",
				"صنعت داروسازی ایران بیش از 95% نیاز داخلی را تأمین می کند.",
				"ایران دارای over 1,000 کیلومتر مرز آبی است.",
				"تعداد دانشگاه‌های ایران به over 2,500 مرکز آموزش عالی رسیده است.",
				"صادرات صنایع دستی ایران سالانه حدود 300 میلیون دلار است.",
				"ایران دارای بیش از 8,000 اثر ثبت شده ملی است.",
				"تعداد مطبوعات فعال در ایران over 3,000 عنوان است.",
				"صادرات محصولات کشاورزی ایران approximately 6 میلیون تن در سال است.",
				"صنعت IT ایران سالانه بیش از 2 میلیارد دلار درآمد دارد.",
				"ایران دارای over 50 پارک علمی و فناوری است.",
				"تعداد مشترکان تلفن همراه در ایران به over 120 میلیون خط رسیده است.",
				"صادرات سنگ‌های تزئینی ایران سالانه حدود 500 میلیون دلار است.",
				"ایران دارای بیش از 300 شرکت دانش بنیان است.",
				"تعداد هنرمندان ثبت شده در ایران over 50,000 نفر است.",
				"صادرات خدمات فنی و مهندسی ایران approximately 1 میلیارد دلار در سال است.",
				"صنعت نساجی ایران سالانه بیش از 400 هزار تن محصول تولید می کند.",
				"ایران دارای over 20 نیروگاه هسته‌ای در حال برنامه‌ریزی است.",
				"تعداد ورزشکاران ثبت شده در ایران over 4 میلیون نفر است.",
				"صادرات software ایران سالانه حدود 150 میلیون دلار است.",
				"ایران دارای بیش از 100 شهر با جمعیت over 100,000 نفر است.",
				"تعداد پژوهشگاه‌های علمی ایران over 200 مرکز است.",
				"صادرات گیاهان دارویی ایران approximately 50 هزار تن در سال است.",
				"صنعت خودروی ایران سالانه بیش از 1.5 میلیون دستگاه تولید می کند.",
				"ایران دارای over 15,000 مرکز فرهنگی و هنری است.",
				"تعداد طلاب علوم دینی در ایران over 250,000 نفر است.",
				"صادرات محصولات چرمی ایران سالانه حدود 200 میلیون دلار است.",
				"ایران دارای بیش از 500 شرکت فعال در حوزه نانو تکنولوژی است.",
				"تعداد مشاغل خانگی ثبت شده در ایران over 1 میلیون واحد است.",
				"صادرات آبزیان ایران approximately 100 هزار تن در سال است.",
				"صنعت هواپیمایی ایران دارای over 150 فروند هواپیما است.",
				"ایران دارای over 5,000 سال تاریخ مکتوب است.",
				"تعداد آثار ثبت شده جهانی ایران در یونسکو 26 اثر است.",
				"صادرات کالاهای فرهنگی ایران سالانه حدود 100 میلیون دلار است.",
				"ایران دارای بیش از 2,000 شرکت فعال در حوزه ICT است.",
				"تعداد نشریات الکترونیکی ایران over 5,000 عنوان است.",
				"صادرات خدمات پزشکی ایران approximately 500 میلیون دلار در سال است.",
				"صنعت معدن ایران دارای over 5,000 معدن فعال است.",
				"ایران دارای over 1 میلیون دانش آموخته دانشگاهی در سال است.",
				"تعداد اختراعات ثبت شده ایرانیان over 30,000 patent است.",
				"صادرات کالاهای ورزشی ایران سالانه حدود 50 میلیون دلار است.",
				"ایران دارای بیش از 100 شتابدهنده استارتاپی است.",
				"تعداد شرکت‌های دانش بنیان ایران over 6,000 شرکت است.",
				"صادرات خدمات آموزشی ایران approximately 200 میلیون دلار در سال است.",
				"صنعت ساختمان ایران سالانه over 800,000 واحد مسکونی می سازد.",
				"ایران دارای over 10,000 کیلومتر خطوط انتقال نفت و گاز است.",
				"تعداد پارک‌های علم و فناوری ایران 45 پارک است.",
				"صادرات محصولات نانو ایران سالانه حدود 100 میلیون دلار است.",
				"ایران دارای بیش than 50,000 پزشک متخصص است.",
				"تعداد رشته‌های دانشگاهی در ایران over 2,000 رشته است.",
				"صادرات خدمات گردشگری ایران approximately 5 میلیارد دلار در سال است.",
				"صنعت کشاورزی ایران سالانه over 120 میلیون تن محصول تولید می کند.",
				"ایران دارای over 3,000 کیلومتر خطوط لوله نفت و گاز است.",
				"تعداد موزه‌های ایران 700 موزه است.",
				"صادرات محصولات الکترونیکی ایران سالانه حدود 300 میلیون دلار است.",
				"ایران دارای بیش از 200 شرکت فعال در حوزه biotechnology است.",
				"تعداد کتاب‌های منتشر شده در ایران سالانه over 70,000 عنوان است.",
				"صادرات خدمات مهندسی ایران approximately 2 میلیارد دلار در سال است.",
				"صنعت حمل و نقل ایران سالانه over 800 میلیون تن کالا جابجا می کند.",
				"ایران دارای over 20,000 کیلومتر خطوط fiber optic است.",
				"تعداد گالری‌های هنری ایران 1,500 گالری است.",
				"صادرات محصولات فرهنگی ایران سالانه حدود 250 میلیون دلار است.",
				"ایران دارای بیش از 100 مرکز رشد فناوری است.",
				"تعداد استارتاپ‌های فعال در ایران over 5,000 شرکت است.",
				"صادرات خدمات IT ایران approximately 1.5 میلیارد دلار در سال است.",
				"صنعت گردشگری سلامت ایران سالانه over 500,000 توریست جذب می کند.",
				"ایران دارای over 8,000 کیلومتر مرز زمینی است.",
				"تعداد آثار تاریخی ثبت شده ایران over 35,000 اثر است.",
				"صادرات محصولات غذایی ایران سالانه حدود 4 میلیارد دلار است.",
			],
		},
	},
	english: {
		easy: {
			duration: 60,
			words: [
				"the",
				"be",
				"to",
				"of",
				"and",
				"a",
				"in",
				"that",
				"have",
				"I",
				"it",
				"for",
				"not",
				"on",
				"with",
				"he",
				"as",
				"you",
				"do",
				"at",
				"this",
				"but",
				"his",
				"by",
				"from",
				"they",
				"we",
				"say",
				"her",
				"she",
				"or",
				"an",
				"will",
				"my",
				"one",
				"all",
				"would",
				"there",
				"their",
				"what",
				"so",
				"up",
				"out",
				"if",
				"about",
				"who",
				"get",
				"which",
				"go",
				"me",
				"when",
				"make",
				"can",
				"like",
				"time",
				"no",
				"just",
				"him",
				"know",
				"take",
				"people",
				"into",
				"year",
				"your",
				"good",
				"some",
				"could",
				"them",
				"see",
				"other",
				"than",
				"then",
				"now",
				"look",
				"only",
				"come",
				"its",
				"over",
				"think",
				"also",
				"back",
				"after",
				"use",
				"two",
				"how",
				"our",
				"work",
				"first",
				"well",
				"way",
				"even",
				"new",
				"want",
				"because",
				"any",
				"these",
				"give",
				"day",
				"most",
				"us",
			],
		},
		medium: {
			duration: 45,
			words: [
				"I am going to the store to buy some groceries.",
				"She loves reading books in her free time.",
				"They are planning a trip to Europe next summer.",
				"We need to finish this project by Friday.",
				"He plays the guitar very well.",
				"The weather is beautiful today.",
				"She teaches English at the local university.",
				"They have been married for ten years.",
				"We should protect the environment for future generations.",
				"He works as a software engineer.",
				"The children are playing in the park.",
				"She is learning how to cook Italian food.",
				"They bought a new house last month.",
				"We are watching a movie tonight.",
				"He enjoys hiking in the mountains.",
				"The company is launching a new product.",
				"She volunteers at the animal shelter.",
				"They are celebrating their anniversary.",
				"We need to save money for our vacation.",
				"He is studying for his final exams.",
				"The restaurant serves delicious food.",
				"She writes poetry in her journal.",
				"They are renovating their kitchen.",
				"We are learning a new language.",
				"He runs five miles every morning.",
				"The museum has an interesting exhibition.",
				"She is training for a marathon.",
				"They adopted a puppy from the shelter.",
				"We are planting a garden in our backyard.",
				"He is listening to classical music.",
				"The library is quiet and peaceful.",
				"She is designing a new website.",
				"They are attending a conference.",
				"We are cooking dinner together.",
				"He is fixing the broken chair.",
				"The students are taking a test.",
				"She is painting a beautiful landscape.",
				"They are traveling around the world.",
				"We are discussing important issues.",
				"He is reading the newspaper.",
				"The team won the championship.",
				"She is taking photography classes.",
				"They are building a new school.",
				"We are organizing a charity event.",
				"He is playing with his dog.",
				"The sun is setting in the west.",
				"She is writing a novel.",
				"They are investing in renewable energy.",
				"We are cleaning the house.",
				"He is teaching mathematics.",
				"The doctor is examining the patient.",
				"She is practicing yoga.",
				"They are developing a new app.",
				"We are visiting our grandparents.",
				"He is repairing the car.",
				"The artist is creating a sculpture.",
				"She is studying marine biology.",
				"They are improving their skills.",
				"We are celebrating a birthday.",
				"He is fishing in the lake.",
				"The birds are singing in the trees.",
				"She is managing a team of developers.",
				"They are exploring ancient ruins.",
				"We are learning about history.",
				"He is taking a nap.",
				"The river flows into the ocean.",
				"She is conducting research.",
				"They are volunteering at the hospital.",
				"We are shopping for clothes.",
				"He is playing chess with his friend.",
				"The moon is full tonight.",
				"She is giving a presentation.",
				"They are hiking in the forest.",
				"We are watching the stars.",
				"He is building a treehouse.",
				"The flowers are blooming in spring.",
				"She is solving complex problems.",
				"They are attending a wedding.",
				"We are listening to a podcast.",
				"He is watering the plants.",
				"The wind is blowing strongly.",
				"She is learning to play piano.",
				"They are starting a business.",
				"We are exercising at the gym.",
				"He is taking photographs of nature.",
				"The snow is falling gently.",
				"She is organizing her desk.",
				"They are sailing on the lake.",
				"We are having a picnic.",
				"He is writing a letter.",
				"The cat is sleeping on the couch.",
				"She is programming a robot.",
				"They are climbing a mountain.",
				"We are roasting marshmallows.",
				"He is studying the map.",
				"The clock is ticking loudly.",
				"She is designing a dress.",
				"They are performing a play.",
				"We are solving a puzzle.",
				"He is feeding the birds.",
				"The train is arriving at the station.",
				"She is editing a video.",
				"They are planting trees.",
				"We are learning first aid.",
				"He is playing the violin.",
			],
		},
		hard: {
			duration: 30,
			words: [
				"The quantum computer solved the complex equation in just 2.7 seconds, which would have taken a classical computer over 10,000 years.",
				"According to recent studies, the global population is projected to reach 9.7 billion by 2050 and 10.9 billion by 2100.",
				"The Mars Perseverance rover collected 43 sample tubes containing Martian rock and soil for potential return to Earth.",
				"Scientists discovered a new species of deep-sea creature at depths exceeding 4,000 meters in the Pacific Ocean.",
				"The International Space Station orbits Earth at an altitude of approximately 408 kilometers and a speed of 28,000 km/h.",
				"Researchers developed a new battery technology that can store 3.5 times more energy than current lithium-ion batteries.",
				"The global cryptocurrency market capitalization reached $2.3 trillion in November 2021 before declining to $1.2 trillion.",
				"A newly discovered exoplanet, located 120 light-years away, shows signs of potential habitability with water vapor in its atmosphere.",
				"The James Webb Space Telescope, with its 6.5-meter primary mirror, can detect objects 100 times fainter than the Hubble Telescope.",
				"Artificial intelligence algorithms now can diagnose certain medical conditions with 97.5% accuracy, surpassing human experts.",
				"The Large Hadron Collider accelerates protons to 99.9999991% of the speed of light before collisions.",
				"Climate models predict global temperatures could rise by 2.7°C to 3.1°C above pre-industrial levels by 2100.",
				"Neuroscientists mapped over 86 billion neurons in the human brain using advanced imaging techniques.",
				"The COVID-19 pandemic caused global GDP to contract by approximately 3.4% in 2020, the worst recession since World War II.",
				"Renewable energy sources accounted for 29% of global electricity generation in 2020, up from 27% in 2019.",
				"The deepest part of the ocean, the Mariana Trench, reaches depths of nearly 11,000 meters below sea level.",
				"Researchers sequenced the complete human genome, consisting of approximately 3.2 billion DNA base pairs.",
				"The global internet traffic reached 4.8 zettabytes in 2022, equivalent to 4.8 trillion gigabytes.",
				"A new semiconductor material demonstrated electron mobility 5 times higher than traditional silicon chips.",
				"The Hubble constant, measuring the expansion rate of the universe, is estimated at 73.3 km/s per megaparsec.",
				"Quantum entanglement experiments successfully demonstrated instant communication over distances of 1,200 kilometers.",
				"The global average concentration of carbon dioxide in the atmosphere reached 417 parts per million in 2022.",
				"Advanced CRISPR gene editing techniques achieved 99.9% accuracy in correcting genetic mutations.",
				"The world's largest optical telescope, with a 39-meter mirror, is scheduled for completion in 2027.",
				"Machine learning algorithms analyzed over 50 petabytes of data to identify new cancer treatment options.",
				"The global space economy reached $447 billion in 2020, with commercial activities accounting for 80% of the total.",
				"Scientists developed a new material that can capture 98% of sunlight for highly efficient solar energy conversion.",
				"The human microbiome contains approximately 38 trillion bacterial cells, outnumbering human cells.",
				"Global sea levels have risen by 23 centimeters since 1880, with the rate accelerating to 3.6 mm per year.",
				"Advanced nuclear fusion experiments achieved plasma temperatures of 150 million degrees Celsius.",
				"The global smartphone market shipped 1.35 billion units in 2021, with 5G phones comprising 40% of sales.",
				"Researchers created an artificial intelligence that can predict protein folding with 92.4% accuracy.",
				"The worldwide web contains approximately 5.3 billion indexed pages as of 2023.",
				"Quantum computers achieved quantum supremacy by solving a problem in 200 seconds that would take supercomputers 10,000 years.",
				"The global average internet speed reached 93.5 Mbps for fixed broadband and 39.5 Mbps for mobile in 2023.",
				"Scientists discovered a new elementary particle with a mass approximately 4 times that of a proton.",
				"The Arctic sea ice minimum extent reached 4.72 million square kilometers in 2021, the second lowest on record.",
				"Advanced materials science developed a graphene-based battery that charges 5 times faster than lithium-ion.",
				"The global electric vehicle market grew by 108% in 2021, with 6.6 million units sold worldwide.",
				"Researchers developed a quantum sensor capable of detecting magnetic fields with 10 times greater sensitivity.",
				"The human genome contains approximately 20,000-25,000 protein-coding genes, representing only 1.5% of DNA.",
				"Global carbon emissions reached 36.8 billion metric tons in 2022, a new record high.",
				"Artificial intelligence systems achieved human-level performance in complex strategy games with 99.8% win rate.",
				"The Parker Solar Probe approached within 8.5 million kilometers of the Sun's surface, the closest ever.",
				"Advanced telescope arrays detected gravitational waves from the merger of two black holes 7 billion light-years away.",
				"The global semiconductor industry produced over 1.1 trillion units in 2021, worth $553 billion.",
				"Researchers created a bioengineered tissue that can repair damaged hearts with 94% success rate in animal trials.",
				"The worldwide installed solar capacity reached 1,047 gigawatts in 2022, enough to power 200 million homes.",
				"Quantum communication networks demonstrated secure transmission over distances of 4,600 kilometers.",
				"The global average life expectancy increased to 72.6 years in 2019, up from 66.8 years in 2000.",
				"Advanced robotics systems achieved human-like dexterity with 99.2% accuracy in complex manipulation tasks.",
				"The Internet of Things connected over 35 billion devices worldwide in 2023, generating 79 zettabytes of data.",
				"Scientists developed a new catalyst that converts carbon dioxide into fuel with 90% efficiency.",
				"The global data storage capacity exceeded 10 zettabytes in 2023, doubling every 3 years.",
				"Researchers created an artificial intelligence that can write computer code with 95.7% accuracy.",
				"The human brain processes information at speeds up to 120 meters per second along neural pathways.",
				"Advanced materials developed for space elevators demonstrated tensile strength of 150 gigapascals.",
				"The global renewable energy investment reached $366 billion in 2021, a new record high.",
				"Quantum memory devices achieved coherence times of over 6 hours at room temperature.",
				"The worldwide installed wind power capacity reached 837 gigawatts in 2022, generating 7% of global electricity.",
				"Scientists created a synthetic organism with a completely artificial genome of 1.08 million base pairs.",
				"The global cloud computing market grew to $405 billion in 2022, with 67% of enterprises using cloud services.",
				"Advanced neural interfaces achieved bidirectional communication with 1,024 electrode channels.",
				"The average global temperature has increased by 1.1°C since the pre-industrial period.",
				"Researchers developed a new antibiotic effective against drug-resistant bacteria with 99.99% efficacy.",
				"The global e-commerce market reached $5.7 trillion in 2022, representing 22% of retail sales.",
				"Quantum sensors demonstrated measurements of magnetic fields with attotesla resolution.",
				"The human body contains approximately 37.2 trillion cells, each with 3.2 billion DNA base pairs.",
				"Advanced artificial intelligence systems achieved superhuman performance in real-time strategy games.",
				"The global installed nuclear capacity reached 393 gigawatts in 2022, providing 10% of world electricity.",
				"Researchers created a quantum internet prototype with entanglement distribution over 100 kilometers.",
				"The worldwide number of internet users reached 5.3 billion in 2023, representing 66% of the global population.",
				"Scientists developed a new solar cell material with 47.1% conversion efficiency, a new world record.",
				"The global ocean acidification has increased by 26% since the industrial revolution.",
				"Advanced quantum algorithms solved optimization problems 100 million times faster than classical computers.",
				"The human immune system can recognize approximately 10^16 different antigens.",
				"Researchers created a biodegradable plastic that decomposes in seawater within 4 weeks.",
				"The global artificial intelligence market reached $327.5 billion in 2021, growing at 39.4% CAGR.",
				"Quantum error correction codes achieved logical qubit fidelity of 99.9%.",
				"The worldwide number of mobile phone subscriptions reached 8.9 billion in 2023, exceeding the global population.",
				"Scientists developed a new cancer immunotherapy with 83% complete response rate in clinical trials.",
				"The global carbon budget allows only 400 billion additional tons of CO2 for a 67% chance of staying below 1.5°C.",
				"Advanced brain-computer interfaces achieved typing speeds of 90 characters per minute using thought alone.",
				"The human eye can distinguish approximately 10 million different colors.",
				"Researchers created an artificial photosynthesis system with 13.4% solar-to-fuel efficiency.",
				"The global video game market reached $180.3 billion in 2021, with 3.24 billion gamers worldwide.",
				"Quantum cryptography systems demonstrated secure key distribution over 800 kilometers of fiber optic cable.",
				"The average global internet user spends 6 hours 58 minutes online each day.",
				"Scientists developed a new material with negative thermal expansion, maintaining dimensions across temperature changes.",
				"The global plastic production reached 367 million metric tons in 2020, with only 9% being recycled.",
				"Advanced artificial intelligence achieved human-level natural language understanding with 95.4% accuracy.",
				"The human heart beats approximately 2.5 billion times in a 70-year lifespan.",
				"Researchers created a quantum radar system capable of detecting stealth aircraft at 100 kilometers range.",
				"The worldwide digital data creation reached 97 zettabytes in 2022, with 90% created in the last two years.",
				"Scientists developed a new battery technology with energy density of 500 watt-hours per kilogram.",
				"The global average atmospheric methane concentration reached 1,911 parts per billion in 2022.",
				"Quantum machine learning algorithms demonstrated 100,000x speedup for certain optimization problems.",
				"The human body replaces approximately 330 billion cells daily, about 1% of all cells.",
			],
		},
	},
	coding: {
		easy: {
			duration: 60,
			words: [
				"function",
				"if",
				"else",
				"for",
				"while",
				"do",
				"switch",
				"case",
				"break",
				"continue",
				"return",
				"var",
				"let",
				"const",
				"class",
				"extends",
				"super",
				"import",
				"export",
				"default",
				"from",
				"as",
				"new",
				"this",
				"typeof",
				"void",
				"delete",
				"in",
				"instanceof",
				"try",
				"catch",
				"finally",
				"throw",
				"debugger",
				"with",
				"yield",
				"await",
				"async",
				"static",
				"public",
				"private",
				"protected",
				"interface",
				"implements",
				"package",
				"enum",
				"type",
				"namespace",
				"declare",
				"get",
				"set",
				"require",
				"module",
				"exports",
				"true",
				"false",
				"null",
				"undefined",
				"NaN",
				"Infinity",
				"console",
				"log",
				"error",
				"warn",
				"info",
				"debug",
				"time",
				"timeEnd",
				"assert",
				"clear",
				"document",
				"window",
				"navigator",
				"alert",
				"confirm",
				"prompt",
				"parseInt",
				"parseFloat",
				"isNaN",
				"isFinite",
				"encodeURI",
				"decodeURI",
				"encodeURIComponent",
				"decodeURIComponent",
				"eval",
				"Object",
				"Array",
				"String",
				"Number",
				"Boolean",
				"Date",
				"Math",
				"RegExp",
				"Error",
				"Map",
				"Set",
				"WeakMap",
				"WeakSet",
				"Promise",
				"Proxy",
				"Reflect",
				"Symbol",
				"Iterator",
				"Generator",
				"ArrayBuffer",
				"DataView",
				"Int8Array",
				"Uint8Array",
				"Int16Array",
				"Uint32Array",
			],
		},
		medium: {
			duration: 45,
			words: [
				"console.log('Hello, World!');",
				"function calculateSum(a, b) { return a + b; }",
				"const user = { name: 'John', age: 30 };",
				"if (x > 10) { console.log('x is greater than 10'); }",
				"for (let i = 0; i < 10; i++) { console.log(i); }",
				"const numbers = [1, 2, 3, 4, 5];",
				"const doubled = numbers.map(n => n * 2);",
				"try { riskyOperation(); } catch (error) { console.error(error); }",
				"const response = await fetch('https://api.example.com/data');",
				"class Person { constructor(name) { this.name = name; } }",
				"const isEven = num => num % 2 === 0;",
				"const unique = [...new Set(array)];",
				"localStorage.setItem('key', 'value');",
				"const data = JSON.parse(localStorage.getItem('data'));",
				"document.addEventListener('click', handleClick);",
				"const timer = setTimeout(() => {}, 1000);",
				"const element = document.getElementById('myId');",
				"const filtered = array.filter(item => item.isActive);",
				"const sorted = array.sort((a, b) => a - b);",
				"const reduced = array.reduce((acc, curr) => acc + curr, 0);",
				"const promise = new Promise((resolve, reject) => {});",
				"const regex = /pattern/g;",
				"const date = new Date();",
				"const random = Math.floor(Math.random() * 100);",
				"const cloned = JSON.parse(JSON.stringify(object));",
				"function debounce(func, wait) { let timeout; return function executedFunction(...args) { clearTimeout(timeout); timeout = setTimeout(() => func.apply(this, args), wait); }; }",
				"const merged = {...obj1, ...obj2};",
				"const hasProperty = object.hasOwnProperty('key');",
				"const entries = Object.entries(object);",
				"const values = Object.values(object);",
				"const keys = Object.keys(object);",
				"const length = array.length;",
				"const sliced = array.slice(0, 5);",
				"const spliced = array.splice(0, 2);",
				"const joined = array.join(', ');",
				"const reversed = array.reverse();",
				"const found = array.find(item => item.id === 1);",
				"const includes = array.includes('value');",
				"const index = array.indexOf('value');",
				"const every = array.every(item => item > 0);",
				"const some = array.some(item => item > 0);",
				"const mapped = new Map([['key', 'value']]);",
				"const set = new Set([1, 2, 3]);",
				"const weakMap = new WeakMap();",
				"const weakSet = new WeakSet();",
				"const symbol = Symbol('description');",
				"function* generator() { yield 1; yield 2; }",
				"const iterator = array[Symbol.iterator]();",
				"const proxy = new Proxy(target, handler);",
				"const reflected = Reflect.get(target, property);",
				"const promised = Promise.all([promise1, promise2]);",
				"const raced = Promise.race([promise1, promise2]);",
				"const resolved = Promise.resolve(value);",
				"const rejected = Promise.reject(error);",
				"async function asyncFunction() { await something(); }",
				"const buffer = new ArrayBuffer(16);",
				"const view = new DataView(buffer);",
				"const intArray = new Int8Array(10);",
				"const uintArray = new Uint8Array(10);",
				"const int16Array = new Int16Array(10);",
				"const uint32Array = new Uint32Array(10);",
				"const floatArray = new Float32Array(10);",
				"const doubleArray = new Float64Array(10);",
				"const bigInt = BigInt(9007199254740991);",
				"const bigIntArray = new BigInt64Array(10);",
				"const bigUintArray = new BigUint64Array(10);",
				"const sharedBuffer = new SharedArrayBuffer(1024);",
				"const atomics = Atomics.load(sharedArray, 0);",
				"const json = JSON.stringify(object);",
				"const parsed = JSON.parse(json);",
				"const encoded = encodeURIComponent('string');",
				"const decoded = decodeURIComponent(encoded);",
				"const evaluated = eval('2 + 2');",
				"const isArray = Array.isArray(value);",
				"const fromEntries = Object.fromEntries(entries);",
				"const frozen = Object.freeze(object);",
				"const sealed = Object.seal(object);",
				"const prevented = Object.preventExtensions(object);",
				"const defined = Object.defineProperty(object, 'property', { value: 1 });",
				"const descriptors = Object.getOwnPropertyDescriptors(object);",
				"const prototype = Object.getPrototypeOf(object);",
				"const setPrototype = Object.setPrototypeOf(object, prototype);",
				"const created = Object.create(prototype);",
				"const assigned = Object.assign({}, object);",
				"const is = Object.is(value1, value2);",
				"const stringified = value.toString();",
				"const numbered = Number('123');",
				"const fixed = number.toFixed(2);",
				"const precision = number.toPrecision(4);",
				"const exponential = number.toExponential(2);",
				"const parsedInt = parseInt('10', 10);",
				"const parsedFloat = parseFloat('10.5');",
				"const isNaN = Number.isNaN(value);",
				"const isFinite = Number.isFinite(value);",
				"const isInteger = Number.isInteger(value);",
				"const isSafeInteger = Number.isSafeInteger(value);",
				"const maxSafe = Number.MAX_SAFE_INTEGER;",
				"const minSafe = Number.MIN_SAFE_INTEGER;",
				"const maxValue = Number.MAX_VALUE;",
				"const minValue = Number.MIN_VALUE;",
				"const positiveInfinity = Number.POSITIVE_INFINITY;",
				"const negativeInfinity = Number.NEGATIVE_INFINITY;",
			],
		},
		hard: {
			duration: 30,
			words: [
				"const reactiveProxy = new Proxy(target, { get: (obj, prop) => { track(obj, prop); return Reflect.get(obj, prop); }, set: (obj, prop, value) => { Reflect.set(obj, prop, value); trigger(obj, prop); return true; } });",
				"function* fibonacciGenerator() { let [prev, curr] = [0, 1]; while (true) { yield curr; [prev, curr] = [curr, prev + curr]; } }",
				"const deepClone = obj => { if (obj === null || typeof obj !== 'object') return obj; if (obj instanceof Date) return new Date(obj.getTime()); if (obj instanceof RegExp) return new RegExp(obj); const cloned = new obj.constructor(); for (let key in obj) { if (obj.hasOwnProperty(key)) { cloned[key] = deepClone(obj[key]); } } return cloned; };",
				"class Observable { constructor() { this.subscribers = new Set(); } subscribe(callback) { this.subscribers.add(callback); return () => this.subscribers.delete(callback); } notify(data) { this.subscribers.forEach(callback => callback(data)); } }",
				"const memoize = fn => { const cache = new Map(); return (...args) => { const key = JSON.stringify(args); if (cache.has(key)) return cache.get(key); const result = fn(...args); cache.set(key, result); return result; }; };",
				"async function retryOperation(operation, retries = 3, delay = 1000) { try { return await operation(); } catch (error) { if (retries === 0) throw error; await new Promise(resolve => setTimeout(resolve, delay)); return retryOperation(operation, retries - 1, delay * 2); } }",
				"const throttle = (func, limit) => { let inThrottle; return function() { const args = arguments; const context = this; if (!inThrottle) { func.apply(context, args); inThrottle = true; setTimeout(() => inThrottle = false, limit); } }; };",
				"const debounce = (func, wait, immediate) => { let timeout; return function() { const context = this; const args = arguments; const later = function() { timeout = null; if (!immediate) func.apply(context, args); }; const callNow = immediate && !timeout; clearTimeout(timeout); timeout = setTimeout(later, wait); if (callNow) func.apply(context, args); }; };",
				"class LRUCache { constructor(capacity) { this.capacity = capacity; this.cache = new Map(); } get(key) { if (!this.cache.has(key)) return -1; const value = this.cache.get(key); this.cache.delete(key); this.cache.set(key, value); return value; } put(key, value) { if (this.cache.has(key)) this.cache.delete(key); this.cache.set(key, value); if (this.cache.size > this.capacity) this.cache.delete(this.cache.keys().next().value); } }",
				"const curry = fn => { const arity = fn.length; return function $curry(...args) { if (args.length < arity) return $curry.bind(null, ...args); return fn.call(null, ...args); }; };",
				"function compose(...fns) { return fns.reduce((f, g) => (...args) => f(g(...args))); }",
				"const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);",
				"class EventEmitter { constructor() { this.events = new Map(); } on(event, listener) { if (!this.events.has(event)) this.events.set(event, new Set()); this.events.get(event).add(listener); return () => this.off(event, listener); } off(event, listener) { if (this.events.has(event)) this.events.get(event).delete(listener); } emit(event, ...args) { if (this.events.has(event)) { this.events.get(event).forEach(listener => listener(...args)); } } }",
				"const worker = new Worker(URL.createObjectURL(new Blob([` self.onmessage = function(e) { const result = e.data * 2; self.postMessage(result); }; `])));",
				"const sharedBuffer = new SharedArrayBuffer(1024); const sharedArray = new Int32Array(sharedBuffer); Atomics.store(sharedArray, 0, 42);",
				"const weakRef = new WeakRef(targetObject); const dereferenced = weakRef.deref(); if (dereferenced) { /* object still in memory */ }",
				"const finalizationRegistry = new FinalizationRegistry(heldValue => { console.log(`${heldValue} was garbage collected`); }); finalizationRegistry.register(targetObject, 'My Object');",
				"const proxyRevocable = Proxy.revocable(target, handler); proxyRevocable.revoke(); // proxy becomes unusable",
				"const asyncIterator = { [Symbol.asyncIterator]: async function* () { for (let i = 0; i < 5; i++) { await new Promise(resolve => setTimeout(resolve, 100)); yield i; } } };",
				"const privateField = new WeakMap(); class MyClass { constructor() { privateField.set(this, 'private value'); } getPrivate() { return privateField.get(this); } }",
				"const generator = function* () { try { yield 1; yield 2; yield 3; } catch (e) { console.error('Generator error:', e); } }; const gen = generator(); gen.throw(new Error('Something went wrong'));",
				"const asyncGenerator = async function* () { for (let i = 0; i < 5; i++) { await new Promise(resolve => setTimeout(resolve, 100)); yield i; } };",
				"const reflectGet = Reflect.get(target, property, receiver); const reflectSet = Reflect.set(target, property, value, receiver);",
				"const symbolIterator = Symbol.iterator; const iterable = { [symbolIterator]: function* () { yield 1; yield 2; yield 3; } };",
				"const typedArray = new Uint8Array([1, 2, 3, 4, 5]); const arrayBuffer = typedArray.buffer;",
				"const dataView = new DataView(arrayBuffer); const value = dataView.getUint32(0, true); // little-endian",
				"const bigInt64 = BigInt.asIntN(64, BigInt(12345678901234567890)); const bigUint64 = BigInt.asUintN(64, BigInt(12345678901234567890));",
				"const promiseAllSettled = Promise.allSettled([promise1, promise2]).then(results => { results.forEach(result => { if (result.status === 'fulfilled') console.log(result.value); else console.error(result.reason); }); });",
				"const promiseAny = Promise.any([promise1, promise2]).then(first => console.log(first)).catch(err => console.error(err.errors));",
				"const aggregateError = new AggregateError([error1, error2], 'Multiple errors occurred');",
				"const globalThis = globalThis || window || self || global;",
				"const dynamicImport = import('./module.js').then(module => { module.default(); });",
				"const nullishCoalescing = value ?? 'default'; const optionalChaining = obj?.prop?.subprop;",
				"const logicalAssignment = { x: 0 }; logicalAssignment.x ||= 5; logicalAssignment.y &&= 10;",
				"const numericSeparator = 1_000_000_000; const bigIntLiteral = 123456789012345678901234567890n;",
				"const stringReplaceAll = 'hello world'.replaceAll('l', 'L');",
				"const promiseAll = Promise.all([promise1, promise2]).then(([result1, result2]) => { console.log(result1, result2); });",
				"const arrayFlat = nestedArray.flat(2); const arrayFlatMap = array.flatMap(x => [x, x * 2]);",
				"const objectFromEntries = Object.fromEntries([['a', 1], ['b', 2]]);",
				"const stringTrim = '  hello  '.trimStart().trimEnd();",
				"const symbolDescription = Symbol('description').description;",
				"const matchAll = 'hello'.matchAll(/l/g); for (const match of matchAll) console.log(match);",
				"const globalRegex = /pattern/g; const stickyRegex = /pattern/y; const unicodeRegex = /pattern/u;",
				"const intlNumberFormat = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(1234.56);",
				"const intlDateTimeFormat = new Intl.DateTimeFormat('en-US', { dateStyle: 'full', timeStyle: 'long' }).format(new Date());",
				"const intlRelativeTimeFormat = new Intl.RelativeTimeFormat('en', { numeric: 'auto' }).format(-1, 'day');",
				"const intlPluralRules = new Intl.PluralRules('en').select(1);",
				"const intlListFormat = new Intl.ListFormat('en').format(['apple', 'banana', 'orange']);",
				"const intlLocale = new Intl.Locale('en-US', { calendar: 'gregory', hourCycle: 'h12' });",
				"const intlDisplayNames = new Intl.DisplayNames('en', { type: 'region' }).of('US');",
				"const intlSegmenter = new Intl.Segmenter('en', { granularity: 'word' }); const segments = [...intlSegmenter.segment('hello world')];",
				"const webAssemblyModule = WebAssembly.compile(wasmBuffer).then(module => new WebAssembly.Instance(module));",
				"const webAssemblyMemory = new WebAssembly.Memory({ initial: 10, maximum: 100 });",
				"const webAssemblyTable = new WebAssembly.Table({ initial: 2, element: 'anyfunc' });",
				"const webAssemblyGlobal = new WebAssembly.Global({ value: 'i32', mutable: true }, 0);",
				"const webAssemblyInstance = await WebAssembly.instantiate(wasmBuffer, { env: { memory: new WebAssembly.Memory({ initial: 1 }) } });",
				"const webAssemblyStreaming = WebAssembly.instantiateStreaming(fetch('module.wasm')).then(results => results.instance);",
				"const webAssemblyThreads = new Worker('wasm-worker.js'); const sharedMemory = new WebAssembly.Memory({ initial: 1, maximum: 10, shared: true });",
				"const webAssemblySIMD = WebAssembly.SIMD && new WebAssembly.Instance(WebAssembly.compile(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,7,5,1,1,116,0,0,10,6,1,4,0,65,0,253,15,11])));",
				"const webAssemblyReferenceTypes = WebAssembly.ReferenceTypes && new WebAssembly.Global({ value: 'anyref', mutable: true }, null);",
				"const webAssemblyBulkMemory = WebAssembly.BulkMemoryOperations && new WebAssembly.Memory({ initial: 1 }).grow(1);",
				"const webAssemblyTailCall = WebAssembly.TailCall && { /* tail call optimization */ };",
				"const webAssemblyMultiValue = WebAssembly.MultiValue && { /* multiple return values */ };",
				"const webAssemblyGC = WebAssembly.GarbageCollection && { /* garbage collection */ };",
				"const webAssemblyExceptionHandling = WebAssembly.ExceptionHandling && new WebAssembly.Exception({}, []);",
				"const webAssemblyTypeImports = WebAssembly.TypeImports && { /* type imports */ };",
				"const webAssemblyModuleLinking = WebAssembly.ModuleLinking && { /* module linking */ };",
				"const webAssemblyComponentModel = WebAssembly.ComponentModel && { /* component model */ };",
				"const webAssemblyInterfaceTypes = WebAssembly.InterfaceTypes && { /* interface types */ };",
				"const performanceMeasure = performance.measure('myMeasure', 'startMark', 'endMark');",
				"const performanceObserver = new PerformanceObserver(list => { list.getEntries().forEach(entry => console.log(entry)); }); performanceObserver.observe({ entryTypes: ['measure'] });",
				"const userTiming = performance.mark('start'); performance.mark('end'); performance.measure('duration', 'start', 'end');",
				"const resourceTiming = performance.getEntriesByType('resource').filter(entry => entry.initiatorType === 'script');",
				"const navigationTiming = performance.getEntriesByType('navigation')[0];",
				"const paintTiming = performance.getEntriesByType('paint').find(entry => entry.name === 'first-contentful-paint');",
				"const longTaskTiming = performance.getEntriesByType('longtask').filter(task => task.duration > 50);",
				"const layoutShift = performance.getEntriesByType('layout-shift').filter(shift => !shift.hadRecentInput);",
				"const largestContentfulPaint = performance.getEntriesByType('largest-contentful-paint')[0];",
				"const elementTiming = performance.getEntriesByType('element')[0];",
				"const eventTiming = performance.getEntriesByType('event').filter(event => event.duration > 16);",
				"const serverTiming = performance.getEntriesByType('navigation')[0].serverTiming;",
				"const taskAttributionTiming = performance.getEntriesByType('taskattribution')[0];",
				"const visibilityState = document.visibilityState; const visibilityChange = () => { if (document.visibilityState === 'visible') { /* page is visible */ } };",
				"const pageVisibilityAPI = document.addEventListener('visibilitychange', visibilityChange);",
				"const intersectionObserver = new IntersectionObserver(entries => { entries.forEach(entry => { if (entry.isIntersecting) { /* element is in view */ } }); }, { threshold: 0.5 });",
				"const resizeObserver = new ResizeObserver(entries => { entries.forEach(entry => { console.log(entry.contentRect.width, entry.contentRect.height); }); });",
				"const mutationObserver = new MutationObserver(mutations => { mutations.forEach(mutation => { console.log(mutation.type, mutation.target); }); });",
				"const performanceNavigationTiming = performance.getEntriesByType('navigation').filter(entry => entry.entryType === 'navigation')[0];",
				"const performanceResourceTiming = performance.getEntriesByType('resource').filter(entry => entry.initiatorType === 'fetch')[0];",
				"const performancePaintTiming = performance.getEntriesByType('paint').filter(entry => entry.name === 'first-paint')[0];",
				"const performanceElementTiming = performance.getEntriesByType('element').filter(entry => entry.identifier === 'my-element')[0];",
				"const performanceEventTiming = performance.getEntriesByType('event').filter(entry => entry.name === 'click')[0];",
				"const performanceLongTaskTiming = performance.getEntriesByType('longtask').filter(entry => entry.attribution[0].containerType === 'iframe')[0];",
				"const performanceLayoutShift = performance.getEntriesByType('layout-shift').filter(entry => entry.value > 0.1)[0];",
				"const performanceLargestContentfulPaint = performance.getEntriesByType('largest-contentful-paint').filter(entry => entry.renderTime)[0];",
				"const performanceTaskAttribution = performance.getEntriesByType('taskattribution').filter(entry => entry.containerType === 'window')[0];",
				"const performanceServerTiming = performance.getEntriesByType('navigation')[0].serverTiming.filter(entry => entry.name === 'cache')[0];",
				"const performanceMemory = performance.memory && performance.memory.usedJSHeapSize;",
				"const performanceTimeOrigin = performance.timeOrigin;",
				"const performanceNow = performance.now();",
				"const performanceMark = performance.mark('custom-mark');",
				"const performanceMeasureCustom = performance.measure('custom-measure', 'custom-mark-start', 'custom-mark-end');",
				"const performanceClearMarks = performance.clearMarks('custom-mark');",
				"const performanceClearMeasures = performance.clearMeasures('custom-measure');",
				"const performanceClearResourceTimings = performance.clearResourceTimings();",
				"const performanceSetResourceTimingBufferSize = performance.setResourceTimingBufferSize(250);",
				"const performanceToJSON = performance.toJSON();",
				"const performanceTiming = performance.timing && performance.timing.loadEventEnd - performance.timing.navigationStart;",
				"const performanceNavigation = performance.navigation && performance.navigation.type;",
				"const performanceMemoryUsage = performance.memory && (performance.memory.usedJSHeapSize / performance.memory.jsHeapSizeLimit) * 100;",
				"const performanceFrameTiming = performance.getEntriesByType('frame').filter(frame => frame.duration > 16.67)[0];",
			],
		},
	},
	numbers: {
		easy: {
			duration: 60,
			words: [
				"123",
				"456",
				"789",
				"101",
				"112",
				"131",
				"145",
				"167",
				"189",
				"202",
				"225",
				"248",
				"271",
				"294",
				"317",
				"340",
				"363",
				"386",
				"409",
				"432",
				"455",
				"478",
				"501",
				"524",
				"547",
				"570",
				"593",
				"616",
				"639",
				"662",
				"685",
				"708",
				"731",
				"754",
				"777",
				"800",
				"823",
				"846",
				"869",
				"892",
				"915",
				"938",
				"961",
				"984",
				"1007",
				"1030",
				"1053",
				"1076",
				"1099",
				"1122",
				"1145",
				"1168",
				"1191",
				"1214",
				"1237",
				"1260",
				"1283",
				"1306",
				"1329",
				"1352",
				"1375",
				"1398",
				"1421",
				"1444",
				"1467",
				"1490",
				"1513",
				"1536",
				"1559",
				"1582",
				"1605",
				"1628",
				"1651",
				"1674",
				"1697",
				"1720",
				"1743",
				"1766",
				"1789",
				"1812",
				"1835",
				"1858",
				"1881",
				"1904",
				"1927",
				"1950",
				"1973",
				"1996",
				"2019",
				"2042",
				"2065",
				"2088",
				"2111",
				"2134",
				"2157",
				"2180",
				"2203",
				"2226",
				"2249",
				"2272",
			],
		},
		medium: {
			duration: 45,
			words: [
				"123.45",
				"67.89",
				"10.11",
				"12.13",
				"14.15",
				"16.17",
				"18.19",
				"20.21",
				"22.23",
				"24.25",
				"26.27",
				"28.29",
				"30.31",
				"32.33",
				"34.35",
				"36.37",
				"38.39",
				"40.41",
				"42.43",
				"44.45",
				"46.47",
				"48.49",
				"50.51",
				"52.53",
				"54.55",
				"56.57",
				"58.59",
				"60.61",
				"62.63",
				"64.65",
				"66.67",
				"68.69",
				"70.71",
				"72.73",
				"74.75",
				"76.77",
				"78.79",
				"80.81",
				"82.83",
				"84.85",
				"86.87",
				"88.89",
				"90.91",
				"92.93",
				"94.95",
				"96.97",
				"98.99",
				"100.01",
				"102.03",
				"104.05",
				"106.07",
				"108.09",
				"110.11",
				"112.13",
				"114.15",
				"116.17",
				"118.19",
				"120.21",
				"122.23",
				"124.25",
				"126.27",
				"128.29",
				"130.31",
				"132.33",
				"134.35",
				"136.37",
				"138.39",
				"140.41",
				"142.43",
				"144.45",
				"146.47",
				"148.49",
				"150.51",
				"152.53",
				"154.55",
				"156.57",
				"158.59",
				"160.61",
				"162.63",
				"164.65",
				"166.67",
				"168.69",
				"170.71",
				"172.73",
				"174.75",
				"176.77",
				"178.79",
				"180.81",
				"182.83",
				"184.85",
				"186.87",
				"188.89",
				"190.91",
				"192.93",
				"194.95",
				"196.97",
				"198.99",
				"200.01",
				"202.03",
				"204.05",
			],
		},
		hard: {
			duration: 30,
			words: [
				"123+456-789",
				"10.5*2.0/3.0",
				"2^3*4-5",
				"sqrt(144)+7",
				"12%5*3",
				"max(10,20,30)",
				"min(5,10,15)",
				"2*(3+4)-5",
				"10/2+3*4",
				"2^3^2",
				"sin(30)*cos(60)",
				"log(100)+ln(e)",
				"|15-20|*2",
				"round(3.14159,2)",
				"floor(4.99)+ceil(3.01)",
				"avg(10,20,30,40)",
				"sum(1,2,3,4,5)",
				"factorial(5)/2",
				"gcd(48,18)*2",
				"lcm(12,15)+3",
				"2πr (r=5)",
				"a^2+b^2=c^2 (a=3,b=4)",
				"C=2πr (r=7)",
				"A=πr^2 (r=6)",
				"V=4/3πr^3 (r=3)",
				"E=mc^2 (m=0.1)",
				"F=ma (m=5,a=2)",
				"P=IV (I=2,V=120)",
				"V=IR (I=0.5,R=24)",
				"P=W/t (W=100,t=5)",
				"a(b+c)=ab+ac (a=2,b=3,c=4)",
				"(x+y)^2=x^2+2xy+y^2 (x=3,y=4)",
				"sin^2θ+cos^2θ=1 (θ=30)",
				"e^(iπ)+1=0",
				"fibonacci(10)",
				"prime(20)",
				"integral(x^2,0,3)",
				"derivative(x^3,2)",
				"lim(x->0) sin(x)/x",
				"Σ(n=1 to 10) n",
				"det([[1,2],[3,4]])",
				"[[1,2],[3,4]]*[[5,6],[7,8]]",
				"|[[1,2],[3,4]]|",
				"inv([[1,2],[3,4]])",
				"rank([[1,2,3],[4,5,6]])",
				"trace([[1,2],[3,4]])",
				"transpose([[1,2],[3,4]])",
				"eigenvalues([[2,1],[1,2]])",
				"dot([1,2,3],[4,5,6])",
				"cross([1,2,3],[4,5,6])",
				"binomial(5,2)",
				"permutation(5,3)",
				"combination(10,4)",
				"probability(6,10)",
				"mean(10,20,30,40)",
				"median(5,10,15,20,25)",
				"mode(1,2,2,3,4)",
				"stdev(10,20,30,40)",
				"variance(2,4,6,8)",
				"correlation([1,2,3],[4,5,6])",
				"distance((1,2),(4,6))",
				"midpoint((1,2),(5,6))",
				"slope((1,2),(3,4))",
				"y=mx+b (m=2,b=1,x=3)",
				"ax+by=c (a=2,b=3,c=6,x=1)",
				"circle: (x-h)^2+(y-k)^2=r^2 (h=0,k=0,r=5,x=3,y=4)",
				"ellipse: x^2/a^2+y^2/b^2=1 (a=5,b=3,x=4,y=2)",
				"parabola: y=ax^2+bx+c (a=1,b=0,c=0,x=2)",
				"hyperbola: x^2/a^2-y^2/b^2=1 (a=3,b=4,x=5,y=4)",
				"vector: |ai+bj+ck| (a=3,b=4,c=5)",
				"complex: (3+4i)+(2-3i)",
				"(5+2i)*(3-4i)",
				"|3+4i|",
				"conjugate(2+5i)",
				"arg(1+1i)",
				"e^(iπ/2)",
				"Re(3+4i)+Im(2-3i)",
				"polar(3,4)",
				"rect(5,53.13°)",
				"complex: sqrt(-16)",
				"binary: 1101+1011",
				"1010*1100",
				"1111/11",
				"hex: A3F+2C4",
				"DEAD-BEEF",
				"FF*FF",
				"octal: 755+644",
				"123-456",
				"777/7",
				"base64: encode('Hello')",
				"matrix: [[1,2],[3,4]]+[[5,6],[7,8]]",
				"[[1,2],[3,4]]-[[1,1],[1,1]]",
				"3*[[1,2],[3,4]]",
				"[[1,2],[3,4]].*[[5,6],[7,8]]",
				"[[1,2],[3,4]]./[[1,2],[3,4]]",
				"[[1,2],[3,4]]^2",
				"[[1,2],[3,4]]^T",
				"det([[a,b],[c,d]]) (a=1,b=2,c=3,d=4)",
				"inv([[a,b],[c,d]]) (a=1,b=1,c=2,d=3)",
				"eig([[2,-1],[-1,2]])",
				"diffeq: dy/dx=2x (y(0)=1)",
				"d^2y/dx^2+y=0 (y(0)=0,y'(0)=1)",
				"laplace: L{sin(t)}",
				"L^{-1}{1/(s^2+1)}",
				"fourier: F{cos(2πt)}",
				"F^{-1}{δ(f)}",
				"z-transform: Z{a^n}",
				"Z^{-1}{z/(z-1)}",
				"fft([1,2,3,4])",
				"ifft([10,-2+2i,-2,-2-2i])",
				"logic: (p∧q)∨(¬p∧¬q) (p=T,q=F)",
				"p→q ≡ ¬p∨q (p=T,q=F)",
				"p↔q ≡ (p→q)∧(q→p) (p=T,q=T)",
				"∀x∃y P(x,y)",
				"∃x∀y P(x,y)",
				"modus ponens: p→q, p ∴ q",
				"modus tollens: p→q, ¬q ∴ ¬p",
				"de Morgan: ¬(p∧q) ≡ ¬p∨¬q",
				"¬(p∨q) ≡ ¬p∧¬q",
				"distributive: p∧(q∨r) ≡ (p∧q)∨(p∧r)",
				"set: A∪B (A={1,2},B={2,3})",
				"A∩B (A={1,2},B={2,3})",
				"A-B (A={1,2,3},B={2,3,4})",
				"A×B (A={1,2},B={3,4})",
				"P(A) (A={1,2})",
				"|A| (A={1,2,3,4,5})",
				"A⊆B (A={1,2},B={1,2,3})",
				"A⊂B (A={1,2},B={1,2,3})",
				"A=B (A={1,2,3},B={3,2,1})",
				"AΔB (A={1,2,3},B={3,4,5})",
				"graph: V={1,2,3,4}, E={{1,2},{2,3},{3,4},{4,1}}",
				"degree(vertex=2)",
				"adjacency matrix",
				"incidence matrix",
				"path: 1->2->3->4",
				"cycle: 1->2->3->4->1",
				"complete graph K4",
				"bipartite graph",
				"tree with 4 vertices",
				"graph isomorphism",
				"number theory: gcd(48,18)",
				"lcm(12,15)",
				"modular: 15 mod 7",
				"17 ≡ 3 (mod 7)",
				"modular inverse: 3^{-1} mod 7",
				"Chinese remainder: x ≡ 2 mod 3, x ≡ 3 mod 5",
				"Fermat's little: 2^6 mod 7",
				"Euler's theorem: 3^φ(7) mod 7",
				"prime factorization: 84",
				"RSA: encrypt(65) with n=3233, e=17",
			],
		},
	},
};
const invalidKeys =
	"F1 F2 F3 F4 F5 F6 F7 F8 F9 F10 F11 F12  Escape Tab CapsLock Shift Control Alt Meta ArrowLeft ArrowRight ArrowDown ArrowUp Enter Unidentified Backspace ContextMenu PageDown PageUp End Home Delete PrintScreen".split(
		" "
	);
console.log(invalidKeys);

let currentIndex = 0;
let userMistakes = 0;
let isTimerON = false;
let gameDuration = 10;
let currentLanguage = "english";
let currentLevel = "easy";
let startTime;
let lettersArray;
let timerInterval;
let letter;
let resultsChart = null;
//-----------------------------------------------------------
function makingRandomNumber(e) {
	let randomNumber = Math.floor(Math.random() * e);
	return randomNumber;
}

//------------------------------------------------------------
function randomLettersRenderer() {
	lettersArray = letters[currentLanguage][currentLevel];
	console.log(lettersArray.words);

	let randomWord =
		lettersArray.words[makingRandomNumber(lettersArray.words.length)];
	let texts = randomWord.split("");
	console.log(texts);
	let createdWords = texts.map((e) => {
		if (e == " ") {
			console.log("space found");
			return `<span class='space letters'>${e}</span>`;
		} else {
			return `<span class="letters">${e}</span>`;
		}
	});
	lettersDemonestrater.innerHTML = createdWords.join("");
	letter = document.querySelectorAll(".letters");
	if (letter.length > 0) {
		letter[0].classList.add("focused");
		keyBoardImageHandler(letter[currentIndex].innerHTML);
	}
}
//--------------------------------------------------------------------
function handleKey(key) {
	console.log(letter.length);
	console.log(currentIndex);
	console.log("again");
	letter[currentIndex].classList.remove("focused", "wrong");
	console.log(letter[currentIndex]);
	if (key == letter[currentIndex].innerHTML) {
		letter[currentIndex].style.color = "green";
		currentIndex++;
		if (currentIndex != letter.length) {
			letter[currentIndex].classList.add("focused");
			keyBoardImageHandler(letter[currentIndex].innerHTML);
		} else {
			endGame("result");
			resetGame();
		}
	} else {
		userMistakes++;
		mistakesElement.innerHTML = userMistakes;
		letter[currentIndex].classList.add("wrong");
	}
	//-----------------------------------------------------------------------------
	//-----------------------------------------------------------------------------
}
function timer() {
	if (timerInterval) {
		clearInterval(timerInterval);
	}
	startTime = Date.now();
	let endTime = startTime + gameDuration * 1000;

	timerInterval = setInterval(() => {
		let remained = Math.round((endTime - Date.now()) / 1000);
		if (remained <= 0) {
			clearInterval(timerInterval);
			endGame("faild");
			resetGame();
		}
		let minutes = Math.floor(remained / 60);
		let seconds = remained % 60;

		if (minutes > 0) {
			timerElement.innerHTML = `${minutes}m ${seconds}s`;
		} else {
			timerElement.innerHTML = `${seconds}s`;
		}
	}, 1000);
}
function resetGame() {
	clearInterval(timerInterval);
	currentIndex = 0;
	userMistakes = 0;
	isTimerON = false;
	mistakesElement.innerHTML = "0";
	timerElement.innerHTML = "0s";
	randomLettersRenderer();
}
function endGame(modal) {
	if (modal == "result") {
		endElement[0].classList.add("active");
	} else {
		endElement[1].classList.add("active");
	}
	console.log(lettersArray);
	let timeSpent = (Date.now() - startTime) / 1000;
	let correct = letter.length - userMistakes;
	let accuracy = ((correct / letter.length) * 100).toFixed(1);
	let wpm = Math.round(correct / 5 / (timeSpent / 60));
	wpmShower.innerHTML = handleUnits(wpm);
	accuracyShower.innerHTML = handleUnits(accuracy);
	timeSpentShower.innerHTML = timeSpent;
	mistakesShower.innerHTML = userMistakes;
	handleChart(wpm, accuracy, userMistakes);
}
function keyBoardImageHandler(key) {
	let fileName = keyTranslations[key] || key;
	let img = new Image();
	img.src = `./assets/keyboard-images/${fileName}.jpg`;


	img.onload = function () {
		keyBoard.setAttribute("src", `./assets/keyboard-images/${fileName}.jpg`);
	};

	img.onerror = function () {
		keyBoard.setAttribute("src", "./assets/keyboard-images/none.jpg");
	};
}
function handleChart(wpm, accuracy, mistakes) {
	let chartResult = document.getElementById("resultsChart").getContext("2d");
	if (resultsChart) {
		resultsChart.destroy();
	}
	resultsChart = new Chart(chartResult, {
		type: "pie",
		data: {
			labels: ["WPM", "Accuracy", "Mistakes"],
			datasets: [
				{
					label: "Performance",
					data: [wpm, accuracy, mistakes],
					backgroundColor: [
						"rgb(13, 56, 143)",
						"rgb(19, 136, 77)",
						"rgb(107, 14, 37)",
					],
					borderColor: [
						"rgba(26, 95, 228, 1)",
						"rgba(0, 210, 106, 1)",
						"rgba(255, 51, 102, 1)",
					],
					borderWidth: 1,
				},
			],
		},
		options: {
			responsive: true,
			maintainAspectRatio: false,
			scales: {
				y: {
					beginAtZero: true,
					grid: {
						color: "rgba(255, 255, 255, 0.1)",
					},
					ticks: {
						color: "#e6e9f0",
					},
				},
				x: {
					grid: {
						color: "rgba(255, 255, 255, 0.1)",
					},
					ticks: {
						color: "#e6e9f0",
					},
				},
			},
			plugins: {
				legend: {
					labels: {
						color: "#e6e9f0",
					},
				},
			},
		},
	});
}
function handleUnits(unit) {
	if (unit < 0) {
		return 0;
	} else {
		return unit;
	}
}
//-----------------------------------------------------------------------------
document.addEventListener("keyup", (e) => {
	let clickedLetter = e.key;
	console.log("clieckedm");
	if (!isTimerON) {
		console.log("start timer");

		isTimerON = true;
		timer();
	}
	if (!invalidKeys.includes(clickedLetter)) {
		e.preventDefault();
		handleKey(clickedLetter);
	} else {
		console.log(clickedLetter);
		console.log("false");
	}
});
//------------------------------------------------------------------------------
languageSelector.addEventListener("change", (e) => {
	console.log(e.target.value);
	currentLanguage = e.target.value;
	resetGame();
});
levelSelector.addEventListener("change", (e) => {
	console.log(e.target.value);
	currentLevel = e.target.value;
	gameDuration = letters[currentLanguage][currentLevel].duration;
	resetGame();
});
modalCloser.forEach((e) => {
	e.addEventListener("click", () => {
		endElement.forEach((e) => {
			e.classList.remove("active");
		});
	});
});
resetButton.addEventListener("click", () => {
	resetGame();
});
//------------------------------------------------------------------------------
randomLettersRenderer();
